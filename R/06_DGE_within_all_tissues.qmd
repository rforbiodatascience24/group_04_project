---
title: "Differential gene expression analysis on all tissues"
format: html
editor: visual
---

### Load of data and packages

```{r}
library("DESeq2")
library("tidyverse")
library("here")
library("ggprism")
library("patchwork")
library("ggrepel")
library("broom")

sample_data <- read_tsv(file = here("data/01_cleaned_sample_data.tsv"))
count_data <- read_rds(file = here("data/02_count_data_augments.Rdata"))

```

The aim of this analysis is to perform DGE analysis on samples including the rest of the tissues. We have found relevant genes expressed differential on HSC tissue from last analysis. Now we want to include every tissue in order to check significant difference in DGE among these.

# Differential Gene Expression Analysis including other tissues

```{r}
#Selecting tissues
delete_cols_hsc <- sample_data |> 
  filter(!cells == "HSC") |>
  dplyr::select(sample) |>
  pull()

delete_cols_gr <- sample_data |> 
  filter(!cells == "granulocytic") |>
  dplyr::select(sample) |>
  pull()

delete_cols_mo <- sample_data |> 
  filter(!cells == "monocytic") |>
  dplyr::select(sample) |>
  pull()

delete_cols_er <- sample_data |> 
  filter(!cells == "erythroid") |>
  dplyr::select(sample) |>
  pull()

#Selecting count data from tissue
count_data_hsc <- count_data |> 
  dplyr::select(-all_of(delete_cols_hsc)) |>
  mutate(across(everything(), as.numeric))

count_data_gr <- count_data |> 
  dplyr::select(-all_of(delete_cols_gr)) |>
  mutate(across(everything(), as.numeric))

count_data_mo <- count_data |> 
  dplyr::select(-all_of(delete_cols_mo)) |>
  mutate(across(everything(), as.numeric))

count_data_er <- count_data |> 
  dplyr::select(-all_of(delete_cols_er)) |>
  mutate(across(everything(), as.numeric))

#Column to rownames for data
sample_data_hsc <- sample_data |> 
  filter(cells == "HSC") |> 
  column_to_rownames(var = "sample")

#all(rownames(sample_data_hsc) == colnames(count_data_hsc)) # TRUE

sample_data_gr <- sample_data |> 
  filter(cells == "granulocytic") |> 
  column_to_rownames(var = "sample")

#all(rownames(sample_data_gr) == colnames(count_data_gr)) # TRUE

sample_data_mo <- sample_data |> 
  filter(cells == "monocytic") |> 
  column_to_rownames(var = "sample")

#all(rownames(sample_data_mo) == colnames(count_data_mo)) # TRUE

sample_data_er <- sample_data |> 
  filter(cells == "erythroid") |> 
  column_to_rownames(var = "sample")

#all(rownames(sample_data_er) == colnames(count_data_er)) # TRUE

#Creating DESeq Dataset - using only diagnosis for other tissues apart from HSC in the design because sf3b1 and srsf2 are perfectly correlated for these
dds_object_hsc_only <- DESeqDataSetFromMatrix(countData = count_data_hsc, 
                                              colData = sample_data_hsc, 
                                              design = ~ srsf2 + sf3b1 + diagnosis)

dds_object_gr_only <- DESeqDataSetFromMatrix(countData = count_data_gr, 
                                              colData = sample_data_gr, 
                                              design = ~ diagnosis)

dds_object_mo_only <- DESeqDataSetFromMatrix(countData = count_data_mo, 
                                              colData = sample_data_mo, 
                                              design = ~ diagnosis)

dds_object_er_only <- DESeqDataSetFromMatrix(countData = count_data_er, 
                                              colData = sample_data_er, 
                                              design = ~ diagnosis)

#Estimating the size factors
dds_object_hsc_only <- estimateSizeFactors(object = dds_object_hsc_only)
dds_object_gr_only <- estimateSizeFactors(object = dds_object_gr_only)
dds_object_mo_only <- estimateSizeFactors(object = dds_object_mo_only)
dds_object_er_only <- estimateSizeFactors(object = dds_object_er_only)

#DESeq analysis and CLR transformation
dds_object_hsc_only <- DESeq(dds_object_hsc_only)
dds_object_gr_only <- DESeq(dds_object_gr_only)
dds_object_mo_only <- DESeq(dds_object_mo_only)
dds_object_er_only <- DESeq(dds_object_er_only)

#Extracting results
results_hsc_only <- results(object = dds_object_hsc_only, 
                                         alpha = 0.05)

results_gr_only <- results(object = dds_object_gr_only, 
                                         alpha = 0.05)

results_mo_only <- results(object = dds_object_mo_only, 
                                         alpha = 0.05)

results_er_only <- results(object = dds_object_er_only, 
                                         alpha = 0.05)

#Back to DataFrame
hsc_df <- data.frame(results_hsc_only)
hsc_df <- hsc_df |>
  mutate(gene = rownames(hsc_df)) |>
  mutate(tissue = "HSC")

gr_df <- data.frame(results_gr_only)
gr_df <- gr_df |>  
  mutate(gene = rownames(gr_df)) |>
  mutate(tissue = "Granulocytic")

mo_df <- data.frame(results_mo_only)
mo_df <- mo_df |>  
  mutate(gene = rownames(mo_df)) |>
  mutate(tissue = "Monocytic")

er_df <- data.frame(results_er_only)
er_df <- er_df |>  
  mutate(gene = rownames(er_df)) |>
  mutate(tissue = "Erythroid")

full_df <- rbind(hsc_df, gr_df, mo_df, er_df) |>
  mutate(tissue = factor(tissue, levels = c("HSC", "Granulocytic", "Monocytic", "Erythroid")))
```

```{r}
full_df <- full_df |> 
  mutate(dge = case_when(padj < 0.0001 & log2FoldChange > 5 ~ "Over",
                         padj < 0.0001 & log2FoldChange < -5 ~ "Under",
                         TRUE ~ "Neutral"))


full_df |>
  ggplot(mapping = aes(x = log2FoldChange, 
                       y = -log10(padj),
                       color = dge
                       )) + 
  geom_hline(yintercept = -log10(0.0001), 
             color = "black") + 
  geom_vline(xintercept = 5, 
             color = "black") + 
  geom_vline(xintercept = -5, 
             color = "black") +
  geom_point(alpha = 0.5) +
  
  #Overexpression
  geom_text_repel(data = full_df |>
                    filter(dge == "Over"),
                  aes(label = gene),
                  nudge_x = 1,
                  colour = "blue") +
  #Subexpression
  geom_text_repel(data = full_df |>
                    filter(dge == "Under"),
                  aes(label = gene),
                  nudge_x = 1,
                  colour = "red") +
  
  scale_color_manual(values = c("Over" = "blue",
                                "Under" = "red",
                                "Neutral" = "black")) +
  theme_prism() + 
  theme(legend.position = "none") +
  labs(title = "DGE on different tissue between patients with MDS and healthy donors",
       caption = "Adjusted p-value threshold of 0.0001\n
       Colored genes with absolute log2FC greater than 5") +
  facet_wrap(~tissue)
```

```{r}
full_df |>
  filter(!dge == "Neutral") |>
  ggplot(aes(y = log2FoldChange,
             x = 1,
             color = dge)) +
  geom_point(alpha = 0.6) +
  scale_color_manual(values = c("Over" = "blue",
                                "Under" = "red")) +
  geom_hline(yintercept = 0,
             linetype = "dashed") +
  
  geom_text(aes(x = 1.5, y = 0, label = "Overexpressed"), vjust = -1, color = "blue") +
  
  geom_text(aes(x = 1.5, y = 0, label = "Underexpressed"), vjust = 1.8, color = "red") +
  
  geom_text_repel(data = full_df |>
                    filter(dge == "Over"),
                  aes(label = gene),
                  #nudge_x = 0.1,
                  colour = "blue",
                  size = 3) +
  
  geom_text_repel(data = full_df |>
                    filter(dge == "Under"),
                  aes(label = gene),
                  #nudge_x = 0.1,
                  colour = "red",
                  size = 3) +
  xlim(0, 2) +
  facet_wrap(~tissue, ncol = 4) +
  theme(legend.position = "none") +
  labs(title = "Significant DGE on different tissues")
```
