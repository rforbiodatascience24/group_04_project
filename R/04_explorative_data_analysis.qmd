---
title: "Exploratory data analysis"
author: "Group 04"
format: html
editor: visual
---

```{r}
rm(list=ls()) #remove all variables in the environment
packages <- c("tidyverse", "here", "broom", "table1", "ggprism", "patchwork", "RColorBrewer", "DESeq2")
install.packages(base::setdiff(packages, rownames(installed.packages())))

library("here")
library("tidyverse")
library("broom")
library("table1")
library("ggprism")
library("patchwork")
library("RColorBrewer")
library("DESeq2")

```

## Description of sample data

Data load into `sample_data.`

```{r}
sample_data <- read_tsv(file = here("data/01_cleaned_sample_data.tsv"))
```

Varibles and values in `sample_data` renamed, so they look nicer in tables and plots

```{r}
sample_data <- sample_data |> 
  dplyr::rename("Diagnosis" = "diagnosis",
         "Cell fraction" = "cells") |> 
  mutate(`Cell fraction` = case_when(`Cell fraction` == "erythroid" ~ "Erythroid",
                                     `Cell fraction` == "granulocytic" ~ "Granulocytic", 
                                     `Cell fraction` == "HSC" ~ "Hematopoietic", 
                                     `Cell fraction` == "monocytic" ~ "Monocytic")
  )
```

Making table with descriptives and saving.

```{r}
basic_table <- table1( ~ Diagnosis | `Cell fraction`, 
                       data = sample_data)

htmltools::save_html(html = basic_table, file = here("images/table01.html"))
```

And a bar plot describing the distribution of samples across the different diagnoses and saving.

```{r}
cell_fraction_plot <- ggplot(data = sample_data, 
                             mapping = aes(x = Diagnosis, 
                                           fill = `Cell fraction`)
                             ) + 
  geom_bar(color = "black",
           position = "stack", 
           width = 0.6) +
  theme_prism() +
  labs(title = "Cell Fractions within MDS and Healthy donor samples",
       y = "Number of Samples",
       x = "Diagnosis",
       fill = "Cell Fraction",  # Legend title
       caption = "HD = healthy donor,\nMDS = myelodysplastic syndrome") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")

cell_fraction_plot

ggsave(plot = cell_fraction_plot, 
       filename = here("images/plot_cell_fraction_plot.png"))
```

Making plots to explore the mutational spectrum of the samples. As only MDS samples have the mutations, we filter for patients with MDS.

```{r}
mds_data <- sample_data |> 
  filter(Diagnosis == "MDS")

###
srsf2_num_plot <- ggplot(data = mds_data, 
                         mapping = aes(x = `Cell fraction`,
                                       fill = srsf2)) + 
  geom_bar(color = "black") + 
  theme_prism() +
  labs(title = "SRSF2 mutations in MDS samples", 
       y = "Number", 
       x = "") + 
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 0.35), 
        legend.position = "none") + 
  scale_fill_brewer(palette = "Set1") 


sf3b1_num_plot <- ggplot(data = mds_data, 
                         mapping = aes(x = `Cell fraction`,
                                       fill = sf3b1), 
                         legend.position = "none") + 
  geom_bar(color = "black") + 
  theme_prism() +
  labs(title = "SF3B1 mutations in  MDS samples", 
       y = "Number", 
       x = "") + 
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 0.35), 
        legend.position = "right") + 
  scale_fill_brewer(palette = "Set1")



### Could show the same with fractions
srsf2_frac_plot <- ggplot(data = mds_data, 
                          mapping = aes(x = `Cell fraction`,
                                        fill = srsf2)) + 
  geom_bar(position = position_fill(), 
           color = "black") + 
  theme_prism() +
  labs(y = "Fraction") + 
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 0.35), 
        legend.position = "none") + 
  scale_fill_brewer(palette = "Set1")


sf3b1_frac_plot <- ggplot(data = mds_data, 
                          mapping = aes(x = `Cell fraction`,
                                        fill = sf3b1)) + 
  geom_bar(position = position_fill(), 
           color = "black") + 
  theme_prism() +
  labs(y = "Fraction") + 
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 0.35), 
        legend.position = "none") + 
  scale_fill_brewer(palette = "Set1")


### Patching it all together
mutant_plots <- (srsf2_num_plot + sf3b1_num_plot) / (srsf2_frac_plot + sf3b1_frac_plot)


ggsave(plot = mutant_plots, 
       file = here("images/plot_mutations_across_samples.png"), 
                   device = "png", 
                   width = 15, 
                   height = 7)
```

### Histogram : Gene frequencies

```{r}
count_data <- readRDS(file = here("data/02_count_data_augments.Rdata"))
count_data <- count_data |> 
  mutate(across(everything(), as.numeric))

normalized_counts <- readRDS(file = here("data/03_normalized_counts.Rdata"))
normalized_counts <- normalized_counts |>
  mutate(across(everything(), as.numeric))

```

======= We find that only a small fraction of samples carry the SRSF2 mutations, whereas a significant proportion of samples harbor the SF3B1 mutation.

## Clustering analysis

### Clustering by principal component analysis on data that have not been normalized using the variance stabilizing transformation.

Read in the `count_data`.

```{r}
count_data <- read_tsv(file = here("data/03_full_data.tsv"))
```

To make the PCA we need the data to be in a wide data format, so we use `pivot_wider` for that.

```{r}
wide_count_data <- count_data |> 
  pivot_wider(names_from = "gene", values_from = "counts")
```

For a correct PCA, we need to scale the data, which should only be done on the gene-counts, so we deselect, non-count data

```{r}
gene_data <- wide_count_data |> 
  select(!c(sample:cells))
```

Some genes have a very low count, and it is problematic to apply a z-score if most counts are equal between the samples, so we remove genes, where the total count is below 10. Making vector `keep` with observation with counts \> 10

```{r}
keep <- colSums(gene_data) >10 
```

And the number of genes with more than 10 counts is then `sum(keep)` and the number of genes with 10 counts or less is `sum(!keep)`

We subset the genes with more than 10 counts

```{r}
gene_data <- gene_data[, keep]
```

And scale to make the data ready for PCA

```{r}
gene_data_scaled <- gene_data |> 
  scale()
```

Perform the principal component analysis, where the PCA object is saved into `pca_object`.

```{r}
pca_object <- prcomp(gene_data_scaled)
```

Next we augment our original count data with the fitted principal components by using the `augment` function provided by `broom` package.

```{r}
augmented <- pca_object |> 
  broom::augment(wide_count_data)
```

### PCA plot

```{r}
plot_pca_all_non_vst <- ggplot(data = augmented, 
                       mapping = aes(x = .fittedPC1, 
                                     y = .fittedPC2,
                                     shape = cells, 
                                     color = diagnosis)
) + 
  geom_point(alpha = 0.7, size = 6) + 
  labs(title = "All samples\nNo VST transformation", 
       x = "PC1", 
       y = "PC2", 
       shape = "Cell fraction", 
       color = "Diagnosis") + 
  theme_minimal() + 
  scale_shape_discrete(name = "Cell fraction", 
                       labels = c("Erythroid", "Granulocytic", "Hematopoietic", "Monocytic")
  ) +
  scale_color_brewer(palette = "Set1") + 
  theme(plot.title = element_text(hjust = 0.5))

plot_pca_all_non_vst
```

Then we extract the eigenvalues from our `pca_object` to make a scree plot in order to identify how many clusters we should make. From the PCA plot one would suggest three clusters, but a scree-plot could be helpful.

```{r}
eigen <- pca_object |> 
  broom::tidy("eigenvalues")

scree_all_cell_fractions <- eigen |> 
  filter(PC <10) |> 
  ggplot(mapping = aes(x = PC, 
                       y = percent)) + 
  geom_col(fill = "cornflowerblue", 
           color = "black") +  
  theme_prism() +
  labs(title = "Variance explained by each principal component", 
       y = "Fraction of variance explained", 
       x = "Principal component") +
  scale_x_continuous(breaks = 1:10) 

scree_all_cell_fractions
```

## PCA using VST transformed data

We need to read in the count data and the sample data for all and then run the DESeq algorithm

And load data `count_data` which is the count matrix and `sample_data` which is the sample data.

```{r}
sample_data <- read_tsv(file = here("data/01_cleaned_sample_data.tsv"))  

count_data <- read_rds(file = here("data/02_count_data_augments.Rdata"))
```

First we need to convert each observation of the variable `sample` to the variable `id` that will be used for rownames.

```{r}
sample_data <- sample_data |>   
  mutate("id" = sample) |>    
  column_to_rownames(var = "id")
```

And then check if the rownames of sample_data is equal to column names in count_data.

```{r}
all(rownames(sample_data) == colnames(count_data))
```

To establish the DESeq2 object we use the `DESeqDataSetFromMatrix` function and create the object `dds_object`. We stratify according to `diagnosis`, `sf3b1`, `srsf2` and `cells` where `diagnosis` is put in the end of the argument `design`

Making the count_data variables numeric.

```{r}
count_data <- count_data |>    
  mutate(across(everything(), 
                as.numeric)
         )
```

Making the DESeq2-object.

```{r}
dds_object <- DESeqDataSetFromMatrix(countData = count_data,                                       
                                     colData = sample_data,                                       
                                     design = ~ sf3b1 + srsf2 + cells + diagnosis)
```

Applying the vst-transformation to the dds_object

```{r}
dds_object <- vst(object = dds_object, 
                  blind = T)
```

Extracting the data from the PCA transformation

```{r}
pca_all_cells <- plotPCA(object = dds_object, intgroup = "diagnosis")

df_pca_all_cells <- data.frame(pca_all_cells[[1]])

df_pca_all_cells <- df_pca_all_cells |> 
  mutate(sample = name) |> 
  select(-name)
```

We join with the sample data on name = sample to get the cell fraction and diagnosis

```{r}
df_pca_all_cells_joined <- df_pca_all_cells |> 
  full_join(y = sample_data,
            by = "sample")
```

Plotting all cells with VST transformation

```{r}
plot_pca_all_cells_vst <- ggplot(data = df_pca_all_cells_joined, 
                            mapping = aes(x = PC1, 
                                          y = PC2, 
                                          shape = cells, 
                                          color = diagnosis.x)) + 
  geom_point(size = 6, alpha = 0.7)+ 
  scale_color_brewer(palette = "Set1") + 
  labs(title = "All samples\nVST transformation",
       color = "Diagnosis", 
       shape = "Cells") +
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5)) 

plot_pca_all_cells_vst
```

### PCA of HSC only

We need to read in the count data and the sample data for all, select for HSC and run the DESeq2 algorithm.

And load data `count_data` which is the count matrix and `sample_data` which is the sample data.

```{r}
sample_data <- read_tsv(file = here("data/01_cleaned_sample_data.tsv"))  

count_data <- read_rds(file = here("data/02_count_data_augments.Rdata"))
```

The aim of this analysis is to perform DGE analysis on samples that only contain HSC. We found a high variation in the gene expression between the different cell fractions in our first analysis. Now, we want to scope fully on HSC, as these are the biologically most important cells for MDS.

To generate a count matrix with normalized counts we have to apply the DESeq2 analysis on samples that only contain HSC. Hence, we need to filter out data that do not contain `cells == "HSC"`.

We get the sample ID (the one containing GSM....) from the samples that do not contain HSC.

```{r}
delete_cols <- sample_data |> 
  filter(!cells == "HSC") 

delete_cols <- delete_cols |> 
  select(sample)

delete_samples <- delete_cols$sample

```

And from the `count_data` we deselect these columns, so that we now only have HSC derived samples in the `count_data`.

```{r}
count_data <- count_data |> 
  dplyr::select(-all_of(delete_samples))
```

We filter for samples that have HSC in the `cells`

```{r}
sample_data <- sample_data |> 
  filter(cells == "HSC") 
```

And convert `count_data` to numeric.

```{r}
count_data <- count_data |> 
  mutate(across(everything(), as.numeric))
```

We then ensure, that the column variable `sample` in `sample_data` will be converted to rownames by the `column_to_rownames` function.

And in the next command we check that they are equal.

```{r}
sample_data <- sample_data |> 
  column_to_rownames(var = "sample")

all(rownames(sample_data) == colnames(count_data))
```

Then we run the DESeq2 object from matrix

```{r}
dds_object_hsc_only <- DESeqDataSetFromMatrix(countData = count_data, 
                                              colData = sample_data, 
                                              design = ~ srsf2 + sf3b1 + diagnosis)
```

We estimate size factors

```{r}
dds_object_hsc_only <- estimateSizeFactors(object = dds_object_hsc_only)
```

And require normalized counts\

```{r}
norm_counts <- counts(object = dds_object_hsc_only, normalize = TRUE)
```

Convert to data frame

```{r}
norm_counts <- data.frame(norm_counts)
```

Now we have the normalized counts for each sample.

We extract the rownames from the `norm_counts` and use them as values for the new variable `gene` and remove the rownames afterwards.

```{r}
gene_names <- base::rownames(x = norm_counts)

norm_counts <- norm_counts |> 
  mutate(gene = gene_names)

base::rownames(norm_counts) <- NULL
```

Pivoting longer into a new column termed `sample` which contains the sample_id.

```{r}
counts_long <- norm_counts |> 
  pivot_longer(cols = contains("GSM"), 
               names_to = "sample", 
               values_to = "counts") |> 
  mutate(counts = round(x = counts, digits = 0))
```

And we join with sample_data on `sample`, where we firstly need to provide a variable `sample` in the `sample_data`.

```{r}
sample_id <- rownames(sample_data)

sample_data <- sample_data |> 
  mutate(sample = sample_id)

base::rownames(sample_data) <- NULL
```

```{r}
full_data <- counts_long |> 
  full_join(sample_data, by = "sample")
```

# PCA

To make the PCA we need to pivot the data into a wide format

```{r}
wide_count_data_hsc <- full_data |> 
  pivot_wider(names_from = "gene", values_from = "counts")
```

And extract and scale the gene counts

```{r}
count_data_numeric <- wide_count_data_hsc |> 
  dplyr::select(where(is.numeric)) 

count_data_to_keep <- colSums(x = count_data_numeric) > 10

count_data_numeric <- count_data_numeric[, count_data_to_keep]

count_data_scaled <- count_data_numeric |> 
  scale() 
```

Doing the PCA

```{r}
pca_object <- prcomp(x = count_data_scaled)
```

Using `augment` in `broom` to get the principal components

```{r}
augmented <- pca_object |> 
  augment(wide_count_data_hsc)
```

And then we plot the first two principal components

```{r}
plot_pca_hsc_non_vst <- ggplot(data = augmented, 
                       mapping = aes(x = .fittedPC1, 
                                     y = .fittedPC2, 
                                     fill = diagnosis)
) + 
  geom_point(alpha = 0.7, 
             size = 6, 
             shape = 21, 
             color = "black") + 
  labs(title = "HSC samples\nNo VST transformation", 
       x = "PC1", 
       y = "PC2", 
       fill = "Diagnosis") + 
  theme_minimal() +
  scale_fill_brewer(palette = "Set1") + 
  theme(plot.title = element_text(hjust = 0.5))

plot_pca_hsc_non_vst
```

But according to theory we should employ PCA on count data that have been furthermore normalized using the DESeq algorithm and additionally normalized using the variance stabilizing transformation.

So firstly we run or dds_object through the `DESeq` algorithm.

```{r}
dds_object_hsc_only <- DESeq(dds_object_hsc_only)
```

Runningt variance stabilizing transformation on our object.

```{r}
vst_transformed <- vst(dds_object_hsc_only, blind = T)
```

Extracting the data from the `vst_transformed` object, which is a list and from this extracting the first list, which contains the plotting data.

```{r}
pca_data <- plotPCA(vst_transformed, intgroup = "diagnosis")

pca_data_for_plot <- data.frame(pca_data[[1]])
```

We use these data for plotting

```{r}
plot_pca_hsc_vst <- ggplot(data = pca_data_for_plot, 
       mapping = aes(x = PC1, 
                     y = PC2, 
                     fill = diagnosis)
       ) + 
  geom_point(alpha = 0.7, 
             size = 6, 
             shape = 21, 
             color = "black") + 
  theme_minimal() + 
  scale_fill_brewer(palette = "Set1") + 
  labs(title = "HSC samples\nVST transformation", 
       fill = "Diagnosis") + 
  theme(plot.title = element_text(hjust = 0.5))

plot_pca_hsc_vst
```

Patching the four PCA plots together

```{r}
pca_combined <- (plot_pca_all_non_vst + plot_pca_hsc_non_vst) / (plot_pca_all_cells_vst + plot_pca_hsc_vst)

ggsave(plot = pca_combined, file = here("images/pca_plots_combined.png"), width = 20, height = 10)
```

# K-means clustering

We test out clustering by the k-means clustering method too. As we have so many dimensions to cluster on we chose certain genes of relevance to the four different cell lines.

\- HSC: CD34 and KIT

\- Monocytic: HLA-DRA, CCR2

\- Granulocytic: NOS1, CXCL8

\- Erythroid: HBB and HBA1

Make a vector with the genes of interest

```{r}
genes_of_interest <- c("CD34", "KIT", "HLA-DRA", "CCR2", "NOS1", "CXCL8", "HBB", "HBA1")
```

Selecting for `genes_of_interest` in the `gene_data_scaled` object.

```{r}
gene_data_scaled <- as.data.frame(gene_data_scaled)

gene_data_scaled_selected_genes <- gene_data_scaled |> 
  select(all_of(genes_of_interest))
```

Making the model with 4 clusters

```{r}
k_4 <- kmeans(x = gene_data_scaled_selected_genes, centers = 4)
```

Augmenting our dataset

```{r}
augmented_data_for_selected_genes <- k_4 |> 
  augment(wide_count_data)
```

Plotting the clusters genes

```{r}
plot_kmeans <- ggplot(data = augmented_data_for_selected_genes, 
       mapping = aes(x = CD34, 
                     y = HBB,
                     color = .cluster, 
                     shape = cells)
       ) + 
  geom_point(size = 4,
             alpha = 0.5) +
  scale_color_brewer(palette = "Set1") + 
  labs(title = "Kmeans clustering with k = 4", 
       color = "Cluster number", 
       subtitle = "Clustering on lineage specific genes", 
       shape = "Cells",
       x = "log10(CD34 expression)", 
       y = "log10(HBB expression)") + 
  scale_y_log10() +
  scale_x_log10() + 
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5)) + 
  theme(plot.subtitle = element_text(hjust = 0.5))

plot_kmeans

ggsave(plot = plot_kmeans, 
       file = here("images/plot_kmeans4_all_cells.png"), 
                   width = 5, 
                   height = 5)
```

We clearly see a clustering pattern here, where CD34 is increased in the HSC compartment, whereas HBB is enhanced in the the erythroid conmpartment. The monocytic and granulocytic progenitors express neither.

Probably we need to employ some other form of dimensionality reduction/clustering than k-means.
