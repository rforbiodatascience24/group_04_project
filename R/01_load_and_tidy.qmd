---
title: "Loading of data from GSE114922"
author: "Group 04"
format: html
editor: visual
---

This script describes the loading of data from the project "*RNA sequencing of bone marrow CD34+ hematopoietic stem and progenitor cells from patients with myelodysplastic syndrome and healthy controls*", identifer GSE114922.

Data are found at the Gene Expression Omnibus server [here](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE114922).

For the analysis of the data we need to load both the meta data containing sample data and the count data in a matrix form. The count data refers to the number of sequencing reads that were mapped to each gene or transcript in the sample. This means that the counts represent how many times a RNA molecule was sequenced, which can then be used to find out about the relative, and sometimes absolute abundance of this RNA in the sample.

The packages used for this file:

```{r}
rm(list=ls()) # remove all variables in the environment
packages <- c("tidyverse", "here")
install.packages(setdiff(packages, rownames(installed.packages())))  

library("tidyverse")
library("here")
```

Creating the `data`, and `raw_data` directory, loading of sample meta data if it doesn't exist already.

```{r}
if(!dir.exists("data/raw_data")){
  dir.create(path = here("data/raw_data"), recursive = TRUE)
  } 
  
data_path <- here('data/raw_data/GSE114922_family.soft.gz')


if(file.exists(data_path)){
  meta_data <- read_tsv(data_path)
} else {
  meta_data <- read_tsv(file = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE114nnn/GSE114922/soft/GSE114922_family.soft.gz")
  write_tsv(x = meta_data,
          file = str_c(data_path))
}
```

Next we need to extract the necessary sample data from this one column table. These are:

`title`, `accession`, `source`, `diagnosis`, `id`, `sample`, `sf3b1`, `zrsr2`, `srsf2`, `u2af1`, `genome`

```{r}
title <- meta_data |> 
filter(str_detect(string = `^DATABASE = GeoMiame`, 
                  pattern = "Sample_title =") == TRUE) |> 
  rename("title" = `^DATABASE = GeoMiame`)

source <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "Sample_source_name_ch1") == TRUE) |> 
  rename("source" = `^DATABASE = GeoMiame`)

diagnosis <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "disease status") == TRUE) |> 
  rename("diagnosis" = `^DATABASE = GeoMiame`)

id <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "patient id") == TRUE) |> 
  rename("id" = `^DATABASE = GeoMiame`)

sample <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "SAMPLE") == TRUE) |> 
  rename(sample = `^DATABASE = GeoMiame`)

sf3b1 <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "sf3b1")  == TRUE) |> 
  rename("sf3b1" = `^DATABASE = GeoMiame`)

srsf2 <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "srsf2")  == TRUE) |> 
  rename("srsf2" = `^DATABASE = GeoMiame`)

genome <- meta_data |> 
  filter(str_detect(string = `^DATABASE = GeoMiame`,
                    pattern = "Genome_build") == TRUE) |> 
  rename("genome" = `^DATABASE = GeoMiame`)
```

The data are merged into one dataframe termed `sample_data`

```{r}
### Merging the clinical data into one file
sample_data <- cbind(title, source, diagnosis, id, sample, sf3b1, srsf2, genome) 
```

Removing unnecessary strings in each observation with the `str_remove` function.

```{r}
sample_data <- sample_data |> 
  mutate(across(c(title, source, sample),
                ~str_remove(.x, ".*= ")),
         across(c(diagnosis, id, sf3b1, srsf2, genome),
                ~ str_remove(.x, ".*: "))
  )
```

We remove `accession` as this is the same as `sample`. Furthermore, the `source` variable is renamed into `cells`variable with shorter names. `Myelodysplastic syndrome` renamed to `MDS` and `Healthy donor` to `HD`.

```{r}
sample_data <- sample_data |> 
  mutate(cells = case_when(source == "Bone marrow CD34+ hematopoietic stem/progenitor cells" ~ "HSC", 
                           source == "Bone marrow granulocytic precursor" ~ "granulocytic",
                           source == "Bone marrow erythroid precursor" ~ "erythroid", 
                           source == "Bone marrow monocytic precursor" ~ "monocytic"),
         diagnosis = case_when(diagnosis == "Myelodysplastic Syndrome" ~ "MDS", 
                               TRUE ~ "HD")) |> 
  select(-source)
```

Saving as tsv-files

```{r}
write_tsv(x = sample_data, file = here("data/01_cleaned_sample_data.tsv"))
```

Clearing memory to contain the count files

```{r}
rm(list = ls())
```

Loading the count data

```{r}

data_path_count <- here('data/raw_data/GSE114922_raw_counts_GRCh38.p13_NCBI.tsv.gz')


if(file.exists(data_path_count)){
  counts <- read_tsv(data_path_count)
} else {
  counts <- read_tsv(file = "https://www.ncbi.nlm.nih.gov/geo/download/?type=rnaseq_counts&acc=GSE114922&format=file&file=GSE114922_raw_counts_GRCh38.p13_NCBI.tsv.gz")
  write_tsv(x = counts,
          file = str_c(data_path_count))
}

View(counts)
```

Upon inspection we find that the data is already tidy so we save it

```{r}
write_tsv(x = counts, file = here("data/01_cleaned_count_data.tsv"))
```
